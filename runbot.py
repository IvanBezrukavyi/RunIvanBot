import os
import time
import threading
import schedule
from datetime import datetime
from dotenv import load_dotenv
import telebot
import pytz
import tracker

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")
if USER_ID is None:
    raise ValueError("USER_ID environment variable not set")
try:
    USER_ID = int(USER_ID)
except ValueError as exc:
    raise ValueError("USER_ID environment variable is not a valid integer") from exc
if BOT_TOKEN is None:
    raise ValueError("BOT_TOKEN environment variable not set")

bot = telebot.TeleBot(BOT_TOKEN)

# === –ß–ê–°–û–í–ê –ó–û–ù–ê ===
ukraine_tz = pytz.timezone("Europe/Kyiv")

# === –°–¢–ê–ù–ò ===
pushups_count = 13

# === –†–û–ó–ú–ò–ù–ö–ê (–≤—ñ–¥–µ–æ YouTube –¥–æ 2 —Ö–≤) ===
warmup_links = [
    "https://www.youtube.com/watch?v=Gf7nqxkY0yU",  # 2 —Ö–≤
    "https://www.youtube.com/watch?v=nph81YymVqg",  # 1:30 —Ö–≤
    "https://www.youtube.com/watch?v=K-CrEi0ymMg",  # 2 —Ö–≤ –π–æ–≥–∞
]

# === –ú–û–¢–ò–í–ê–¶–Ü–Ø ===
motivations = [
    "üí™ –ü–∞–º'—è—Ç–∞–π, —Ç–∏ —Ä–æ–±–∏—à —Ü–µ –¥–ª—è —Å–µ–±–µ —ñ —Å–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è!",
    "üèÉ‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ —Ü—ñ–ª—ñ ‚Äî 10 –∫–º!",
    "üî• –†—É—Ö ‚Äî –∂–∏—Ç—Ç—è. –¢–∏ –≤–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!",
    "‚úÖ –ö–æ–∂–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ–≥–ª–∏–Ω–∫–∞ —É —Ç–≤–æ—î–º—É –Ω–æ–≤–æ–º—É —Ç—ñ–ª—ñ!",
]

# === –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ===
@bot.message_handler(commands=['start', 'test'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ –≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö.")

# === –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –ù–ê –ë–Ü–ì –Ü –í–Ü–î–¢–ò–°–ö–ê–ù–ù–Ø ===
def running_reminder():
    global pushups_count
    now = datetime.now(ukraine_tz)
    warmup = warmup_links[now.day % len(warmup_links)]
    motivation = motivations[now.day % len(motivations)]

    tracker.log_training_day()

    bot.send_message(USER_ID,
        f"üèÉ‚Äç‚ôÇÔ∏è –ß–∞—Å –Ω–∞ –ø—Ä–æ–±—ñ–∂–∫—É!\n"
        f"üî∏ –ó—Ä–æ–±–∏ —Ä–æ–∑–º–∏–Ω–∫—É: {warmup}\n"
        f"üî∏ –í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å {pushups_count} —Ä–∞–∑(—ñ–≤)\n"
        f"üî∏ –ü–æ—Ç—ñ–º ‚Äî –ø—Ä–æ–±—ñ–∂–∫–∞!\n\n"
        f"{motivation}")
    pushups_count += 1

# === –©–û–¢–ò–ñ–ù–ï–í–ò–ô –¢–†–ï–ö–ï–† –í–ê–ì–ò ===
def weight_checkin():
    bot.send_message(USER_ID, "‚öñÔ∏è –ß–∞—Å –∑–≤–∞–∂—É–≤–∞–Ω–Ω—è! –í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É —É –∫–≥.")

# === –ù–ê–°–¢–†–Ü–ô ===
def mood_checkin():
    bot.send_message(USER_ID, "üß† –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ? (–≤—ñ–¥ 1 –¥–æ 10 –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å)")

# === –°–£–ë–û–¢–ê ‚Äî –ü–†–û–ì–£–õ–Ø–ù–ö–ê –ó –°–ò–ù–û–ú ===
def saturday_walk():
    bot.send_message(USER_ID,
        "üë£ –°—É–±–æ—Ç–∞ ‚Äî –∞–∫—Ç–∏–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è!\n"
        "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª—è–Ω–∫–∞ –Ω–∞ —Å–≤—ñ–∂–æ–º—É –ø–æ–≤—ñ—Ç—Ä—ñ –∑ —Å–∏–Ω–æ–º üë∂\n"
        "üå≥ –ü—Ä–æ—Å—Ç–æ —Ö–æ–¥–∏ 20‚Äì40 —Ö–≤ –±–µ–∑ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.\n"
        "üéß –ú–æ–∂–µ—à –ø–æ—Å–ª—É—Ö–∞—Ç–∏ —Å–ø–æ–∫—ñ–π–Ω—É –º—É–∑–∏–∫—É –∞–±–æ –ø–æ–¥–∫–∞—Å—Ç.\n\n"
        "‚ù§Ô∏è –¢—É—Ä–±–æ—Ç–∞ –ø—Ä–æ —Å–∏–Ω–∞ ‚Äî —Ü–µ —Ç–µ–∂ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è —É —Ç–≤–æ—î –∑–¥–æ—Ä–æ–≤'—è!")

# === –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–û–ü–£–©–ï–ù–ò–• –î–ù–Ü–í ===
def sunday_check():
    missed = tracker.check_missed_days()
    if missed:
        bot.send_message(USER_ID,
            f"üìã –¢–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É: {', '.join(sorted(missed))}\n"
            f"üí° –°–ø—Ä–æ–±—É–π –Ω–∞–¥–æ–ª—É–∂–∏—Ç–∏ –∞–±–æ —Ä–æ–∑–ø–ª–∞–Ω—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å!")
    else:
        bot.send_message(USER_ID, "‚úÖ –£—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!")
    tracker.reset_week_log()

# === –ì–†–ê–§–Ü–ö –ù–ê –¢–ò–ñ–î–ï–ù–¨ ===
schedule.every().tuesday.at("18:30").do(running_reminder)
schedule.every().wednesday.at("18:30").do(running_reminder)
schedule.every().thursday.at("18:30").do(running_reminder)
schedule.every().friday.at("18:30").do(running_reminder)
schedule.every().saturday.at("18:30").do(saturday_walk)
schedule.every().sunday.at("18:30").do(running_reminder)
schedule.every().sunday.at("21:00").do(sunday_check)

# === –¢–†–ï–ö–ï–†–ò ===
schedule.every().monday.at("07:30").do(weight_checkin)
schedule.every().day.at("20:30").do(mood_checkin)

# === –ü–û–¢–û–ö–ò ===
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=run_schedule, daemon=True).start()

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Bot polling error: {e}")
        time.sleep(5)
