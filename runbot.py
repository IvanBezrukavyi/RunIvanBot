import os
import time
import threading
from datetime import datetime, date
import schedule
from dotenv import load_dotenv
import telebot
import urllib3
import ssl
from telebot import apihelper
import ssl
import pytz
from flask import Flask
import tracker

# === FLASK SERVER –î–õ–Ø –ü–Ü–ù–ì–ï–†–ê ===
app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    t = threading.Thread(target=run)
    t.start()

# === –ë–ê–ó–û–í–ï –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")
if USER_ID is None:
    raise ValueError("USER_ID environment variable not set")
try:
    USER_ID = int(USER_ID)
except ValueError as exc:
    raise ValueError("USER_ID environment variable is not a valid integer") from exc
if BOT_TOKEN is None:
    raise ValueError("BOT_TOKEN environment variable not set")


ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
apihelper._urllib3_pool_manager = urllib3.PoolManager(
    num_pools=4,
    ssl_context=ctx,
    cert_reqs='CERT_NONE'
)
bot = telebot.TeleBot(BOT_TOKEN)

# === –°–¢–ê–ù–ò ===
pushups_count = 13
running_days_count = 0
goal_date = date(2025, 9, 15)

# === –†–û–ó–ú–ò–ù–ö–ê ===
warmup_links = [
    "https://www.youtube.com/watch?v=Gf7nqxkY0yU",
    "https://www.youtube.com/watch?v=nph81YymVqg",
    "https://www.youtube.com/watch?v=K-CrEi0ymMg",
]

# === –ú–û–¢–ò–í–ê–¶–Ü–Ø ===
motivations = [
    "üí™ –ü–∞–º'—è—Ç–∞–π, —Ç–∏ —Ä–æ–±–∏—à —Ü–µ –¥–ª—è —Å–µ–±–µ —ñ —Å–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è!",
    "üèÉ‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ —Ü—ñ–ª—ñ ‚Äî 10 –∫–º!",
    "üî• –†—É—Ö ‚Äî –∂–∏—Ç—Ç—è. –¢–∏ –≤–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!",
    "‚úÖ –ö–æ–∂–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ–≥–ª–∏–Ω–∫–∞ —É —Ç–≤–æ—î–º—É –Ω–æ–≤–æ–º—É —Ç—ñ–ª—ñ!",
]

# === –¢–ï–•–ù–Ü–ö–ê –ë–Ü–ì–£ ===
running_tips = [
    "üë£ –¢–≤–æ—è —Å—Ç–æ–ø–∞ –º–∞—î —Ç–æ—Ä–∫–∞—Ç–∏—Å—è –∑–µ–º–ª—ñ –ø—ñ–¥ —Ü–µ–Ω—Ç—Ä–æ–º –≤–∞–≥–∏. –£–Ω–∏–∫–∞–π –ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø‚Äô—è—Ç—É.",
    "ü¶µ –ó–±—ñ–ª—å—à –∫–∞–¥–µ–Ω—Å: —Ü—ñ–ª—å ‚Äî 170‚Äì180 –∫—Ä–æ–∫—ñ–≤/—Ö–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.",
    "üëê –¢—Ä–∏–º–∞–π —Ä—É–∫–∏ –∑—ñ–≥–Ω—É—Ç–∏–º–∏ –ø—ñ–¥ 90¬∞, –Ω–µ –∑–∞—Ç–∏—Å–∫–∞–π –∫—É–ª–∞–∫–∏ ‚Äî —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—å.",
    "üìè –ü–æ–≥–ª—è–¥ —É–ø–µ—Ä–µ–¥, –∫–æ—Ä–ø—É—Å —Ç—Ä–æ—Ö–∏ –Ω–∞—Ö–∏–ª–µ–Ω–∏–π ‚Äî —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î –±—ñ–≥—Ç–∏ –µ–∫–æ–Ω–æ–º–Ω—ñ—à–µ.",
    "üí® –î–∏—Ö–∞–π –≥–ª–∏–±–æ–∫–æ, —á–µ—Ä–µ–∑ –Ω—ñ—Å –∞–±–æ —Ä–æ—Ç, —Ä–∏—Ç–º—ñ—á–Ω–æ: 2 –≤–¥–∏—Ö–∏ ‚Äî 2 –≤–∏–¥–∏—Ö–∏."
]

def local_time():
    tz = pytz.timezone("Europe/Kyiv")
    return datetime.now(tz)

def get_interval_plan():
    today = date.today()
    days_left = (goal_date - today).days

    if days_left > 70:
        return "1 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 6 —Ä–∞—É–Ω–¥—ñ–≤ (~1.5 –∫–º)"
    elif days_left > 50:
        return "2 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 6 —Ä–∞—É–Ω–¥—ñ–≤ (~2.5 –∫–º)"
    elif days_left > 35:
        return "5 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 4 —Ä–∞—É–Ω–¥–∏ (~3.5 –∫–º)"
    elif days_left > 21:
        return "10 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 3 —Ä–∞—É–Ω–¥–∏ (~5.5 –∫–º)"
    elif days_left > 10:
        return "–ë—ñ–∂–∏ –±–µ–∑ –∑—É–ø–∏–Ω–∫–∏ —É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É —Ç–µ–º–ø—ñ (~7 –∫–º)"
    elif days_left > 1:
        return "–ü—Ä–æ–±—ñ–∂–∫–∞ –Ω–∞ ~8-9 –∫–º —É —Ç–µ–º–ø—ñ –∑–º–∞–≥–∞–Ω–Ω—è, —Ñ—ñ–Ω–∞–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
    elif days_left == 1:
        return "üéØ –ó–∞–≤—Ç—Ä–∞ –∑–º–∞–≥–∞–Ω–Ω—è! –õ–µ–≥–∫–∞ –ø—Ä–æ–±—ñ–∂–∫–∞ –∞–±–æ –ø–æ–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. –ü—ñ–¥–≥–æ—Ç—É–π —Ñ–æ—Ä–º—É, –≤–æ–¥—É —ñ –ø–ª–∞–Ω —Ç–µ–º–ø—É."
    else:
        return "üèÅ –°—å–æ–≥–æ–¥–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è! –î–æ–≤—ñ—Ä—è–π –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ, —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ–±—ñ–≥—Ç–∏ 10 –∫–º! üí•"

@bot.message_handler(commands=['start', 'test'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ –≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö.")

def running_reminder():
    global pushups_count, running_days_count
    warmup = warmup_links[local_time().day % len(warmup_links)]
    motivation = motivations[local_time().day % len(motivations)]
    tip = running_tips[local_time().day % len(running_tips)]
    intervals = get_interval_plan()
    days_left = (goal_date - date.today()).days

    bot.send_message(USER_ID,
        f"üèÉ‚Äç‚ôÇÔ∏è –ß–∞—Å –Ω–∞ –ø—Ä–æ–±—ñ–∂–∫—É!"
        f"üî∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {days_left} –¥–Ω—ñ–≤ –¥–æ 10 –∫–º"
        f"üî∏ –ó—Ä–æ–±–∏ —Ä–æ–∑–º–∏–Ω–∫—É: {warmup}"
        f"üî∏ –í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å {pushups_count} —Ä–∞–∑(—ñ–≤)"
        f"üî∏ –ë—ñ–≥ —Å—å–æ–≥–æ–¥–Ω—ñ: {intervals}"
        f"üî∏ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø: 7:45‚Äì8:30 —Ö–≤/–∫–º (–∑–æ–Ω–∞ –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è)"
        f"üî∏ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è: {tip}"
        f"{motivation}")

    pushups_count += 1
    running_days_count += 1
    tracker.log_training_day()

def weight_checkin():
    bot.send_message(USER_ID, "‚öñÔ∏è –ß–∞—Å –∑–≤–∞–∂—É–≤–∞–Ω–Ω—è! –í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É —É –∫–≥.")

def mood_checkin():
    bot.send_message(USER_ID, "üß† –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ? (–≤—ñ–¥ 1 –¥–æ 10 –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å)")

def sleep_checkin():
    bot.send_message(USER_ID, "üõå –°–∫—ñ–ª—å–∫–∏ —Ç–∏ —Å–ø–∞–≤ —É —Å–µ—Ä–µ–¥–Ω—å–æ–º—É —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è?")

def goal_motivation():
    today = local_time()
    days_left = (goal_date - today.date()).days
    bot.send_message(
        USER_ID,
        f"üìÖ –î–æ –∑–∞–±—ñ–≥—É –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days_left} –¥–Ω—ñ–≤! "
        f"–ü–∞–º'—è—Ç–∞–π, —Ç–≤–æ—è –º–µ—Ç–∞ ‚Äî –ø—Ä–æ–±—ñ–≥—Ç–∏ 10 –∫–º.\n"
        f"üí• –¢–∏ –≤–∂–µ –±–ª–∏–∑—å–∫–æ –¥–æ —Ñ—ñ–Ω—ñ—à—É!"
    )

def sunday_check():
    missed = tracker.check_missed_days()
    if missed:
    bot.send_message(
        USER_ID,
        f"üìã –¢–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É: {', '.join(sorted(missed))}\n"
        f"üí° –°–ø—Ä–æ–±—É–π –Ω–∞–¥–æ–ª—É–∂–∏—Ç–∏ –∞–±–æ —Ä–æ–∑–ø–ª–∞–Ω—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å!"
    )
else:
    bot.send_message(USER_ID, "‚úÖ –£—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!")

report_path = tracker.generate_weekly_report_pdf()
with open(report_path, "rb") as pdf_file:
    bot.send_document(USER_ID, pdf_file)

    tracker.reset_week_log()

schedule.every().tuesday.at("15:30").do(running_reminder)
schedule.every().wednesday.at("15:30").do(running_reminder)
schedule.every().friday.at("15:30").do(running_reminder)
schedule.every().sunday.at("15:30").do(running_reminder)
schedule.every().monday.at("05:30").do(weight_checkin)
schedule.every().day.at("17:30").do(mood_checkin)
schedule.every().sunday.at("18:00").do(sunday_check)
schedule.every().monday.at("15:30").do(lambda: tracker.send_strength_reminder(bot, USER_ID))
schedule.every().thursday.at("15:30").do(lambda: tracker.send_strength_reminder(bot, USER_ID))
schedule.every().day.at("05:00").do(goal_motivation)
schedule.every().saturday.at("17:00").do(sleep_checkin)

def run_interval_reminder():
    bot.send_message(USER_ID,
        "üîÅ **–°—å–æ–≥–æ–¥–Ω—ñ ‚Äî —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è**"
        "‚≠êÔ∏è 5√ó3 —Ö–≤ –±—ñ–≥ —É —Ç–µ–º–ø—ñ *6:00/–∫–º*"
        "‚≠êÔ∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ ‚Äî 2 —Ö–≤ —Ö–æ–¥—å–±–∏ –º—ñ–∂ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"
        "‚≠êÔ∏è –†–æ–∑–º–∏–Ω–∫–∞: 10 —Ö–≤ (—à–≤–∏–¥–∫–∞ —Ö–æ–¥—å–±–∞ + –ª–µ–≥–∫–∏–π –±—ñ–≥)"
        "‚≠êÔ∏è –ó–∞–º–∏–Ω–∫–∞: 5‚Äì10 —Ö–≤ (—Ö–æ–¥—å–±–∞ + —Ä–æ–∑—Ç—è–∂–∫–∞)"
        "üåü –¢—Ä–∏–º–∞–π –∫–∞–¥–µ–Ω—Å *165‚Äì170 –∫—Ä–æ–∫—ñ–≤/—Ö–≤*"
        "üß† –§–æ–∫—É—Å: –∫–æ—Ä–æ—Ç–∫—ñ –∫—Ä–æ–∫–∏, –¥–∏—Ö–∞–π —Ä–∏—Ç–º—ñ—á–Ω–æ (2:2)"
        "üìπ –í—ñ–¥–µ–æ –ø–æ —Ç–µ—Ö–Ω—ñ—Ü—ñ: https://youtu.be/GDj34zHAe4k")

def run_tempo_reminder():
    bot.send_message(USER_ID,
        "üöÄ **–°—å–æ–≥–æ–¥–Ω—ñ ‚Äî —Ç–µ–º–ø–æ–≤–∏–π –±—ñ–≥**"
        "‚≠êÔ∏è 3√ó8 —Ö–≤ —É —Ç–µ–º–ø—ñ *6:15‚Äì6:30/–∫–º*"
        "‚≠êÔ∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è: 3 —Ö–≤ –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ (–ø–æ–≤—ñ–ª—å–Ω–∏–π –±—ñ–≥ –∞–±–æ —Ö–æ–¥—å–±–∞)"
        "‚≠êÔ∏è –†–æ–∑–º–∏–Ω–∫–∞: 10 —Ö–≤ –±—ñ–≥/—Ö–æ–¥—å–±–∞"
        "‚≠êÔ∏è –ó–∞–º–∏–Ω–∫–∞: 10 —Ö–≤ —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥"
        "üìà –ü—É–ª—å—Å: 155‚Äì165 —É–¥/—Ö–≤ (–ø–æ—Ä–æ–≥–æ–≤–∞ –∑–æ–Ω–∞)"
        "üß† –§–æ–∫—É—Å: —Ä—ñ–≤–Ω–∏–π —Ç–µ–º–ø, —Å—Ç–∞–±—ñ–ª—å–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è"
        "üìπ –¢–µ—Ö–Ω—ñ–∫–∞ –±—ñ–≥—É: https://youtu.be/PC1N1AfS5n8")

schedule.every().tuesday.at("18:15").do(run_interval_reminder)
schedule.every().wednesday.at("18:15").do(run_tempo_reminder)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

keep_alive()
threading.Thread(target=run_schedule, daemon=True).start()

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Bot polling error: {e}")
