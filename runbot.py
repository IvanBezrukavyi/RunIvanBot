import os
import time
import threading
import logging
from datetime import datetime, date
from dotenv import load_dotenv
import telebot
import schedule
import pytz
import tracker

ukraine_tz = pytz.timezone("Europe/Kyiv")


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")

if BOT_TOKEN is None:
    logging.error("Fatal error: BOT_TOKEN environment variable not set")
    raise ValueError("BOT_TOKEN environment variable not set")

try:
    USER_ID = int(USER_ID)
except (ValueError, TypeError):
    logging.error("Fatal error: USER_ID is invalid or not set")
    raise ValueError("USER_ID environment variable is not a valid integer")

bot = telebot.TeleBot(BOT_TOKEN)

# === –°–¢–ê–ù–ò ===
pushups_count = 13
goal_date = datetime(2025, 9, 15, tzinfo=ukraine_tz)

# === –†–û–ó–ú–ò–ù–ö–ê ===
warmup_links = [
    "https://www.youtube.com/watch?v=Gf7nqxkY0yU",
    "https://www.youtube.com/watch?v=nph81YymVqg",
    "https://www.youtube.com/watch?v=K-CrEi0ymMg",
]

motivations = [
    "üí™ –ü–∞–º'—è—Ç–∞–π, —Ç–∏ —Ä–æ–±–∏—à —Ü–µ –¥–ª—è —Å–µ–±–µ —ñ —Å–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è!",
    "üèÉ‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ —Ü—ñ–ª—ñ ‚Äî 10 –∫–º!",
    "üî• –†—É—Ö ‚Äî –∂–∏—Ç—Ç—è. –¢–∏ –≤–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!",
    "‚úÖ –ö–æ–∂–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ–≥–ª–∏–Ω–∫–∞ —É —Ç–≤–æ—î–º—É –Ω–æ–≤–æ–º—É —Ç—ñ–ª—ñ!",
]

# === –¢–†–ï–ù–£–í–ê–õ–¨–ù–ï –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø ===
def running_reminder():
    global pushups_count
    today = datetime.now(ukraine_tz)
    warmup = warmup_links[today.day % len(warmup_links)]
    motivation = motivations[today.day % len(motivations)]
    days_left = (goal_date - today).days

    intervals = "üèÉ 3 —Ö–≤ –±—ñ–≥ / 1.5 —Ö–≤ —Ö–æ–¥–∞ (–ø–æ–≤—Ç–æ—Ä–∏ 4 —Ä–∞–∑–∏)"
    if days_left < 60:
        intervals = "üèÉ 6 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ (–ø–æ–≤—Ç–æ—Ä–∏ 3 —Ä–∞–∑–∏)"
    if days_left < 30:
        intervals = "üèÉ‚Äç‚ôÇÔ∏è –ë—ñ–∂–∏ –≤ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–º—É —Ç–µ–º–ø—ñ 7:45‚Äì8:30 —Ö–≤/–∫–º –¥–æ 6‚Äì8 –∫–º"

    bot.send_message(USER_ID,
        f"üèÉ‚Äç‚ôÇÔ∏è –ß–∞—Å –Ω–∞ –ø—Ä–æ–±—ñ–∂–∫—É!\n"
        f"üî∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {days_left} –¥–Ω—ñ–≤ –¥–æ 10 –∫–º\n"
        f"üî∏ –ó—Ä–æ–±–∏ —Ä–æ–∑–º–∏–Ω–∫—É: {warmup}\n"
        f"üî∏ –í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å {pushups_count} —Ä–∞–∑(—ñ–≤)\n"
        f"üî∏ –ë—ñ–≥ —Å—å–æ–≥–æ–¥–Ω—ñ: {intervals}\n"
        f"üî∏ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø: 7:45‚Äì8:30 —Ö–≤/–∫–º (–∑–æ–Ω–∞ –∂–∏—Ä–æ—Å–ø–∞–ª–µ–Ω–Ω—è)\n\n"
        f"{motivation}"
    )
    tracker.log_training_day()
    pushups_count += 1

# === –°–ò–õ–û–í–Ü –¢–†–ï–ù–£–í–ê–ù–ù–Ø ===
def strength_training():
    tracker.send_strength_reminder(bot, USER_ID)

# === –©–û–¢–ò–ñ–ù–ï–í–ê –ó–í–Ü–¢–ù–Ü–°–¢–¨ ===
def send_weekly_report():
    path = tracker.generate_weekly_report_pdf()
    with open(path, 'rb') as f:
        bot.send_document(USER_ID, f)

# === –©–û–¢–ò–ñ–ù–ï–í–ï –ó–í–ê–ñ–£–í–ê–ù–ù–Ø ===
def weight_checkin():
    bot.send_message(USER_ID, "‚öñÔ∏è –ß–∞—Å –∑–≤–∞–∂—É–≤–∞–Ω–Ω—è! –í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É —É –∫–≥.")

# === –ù–ê–°–¢–†–Ü–ô ===
def mood_checkin():
    bot.send_message(USER_ID, "üß† –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ? (–≤—ñ–¥ 1 –¥–æ 10 –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å)")

# === –ö–û–ú–ê–ù–î–ò ===
@bot.message_handler(commands=['start', 'test'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ –≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö.")

@bot.message_handler(commands=['goal'])
def send_goal(message):
    today = datetime.now(ukraine_tz)
    days_left = (goal_date - today).days
    bot.send_message(USER_ID,
        f"üéØ –¶—ñ–ª—å: –ø—Ä–æ–±—ñ–≥—Ç–∏ 10 –∫–º –¥–æ 15 –≤–µ—Ä–µ—Å–Ω—è 2025\n"
        f"üìÜ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤"
    )

# === –†–û–ó–ö–õ–ê–î ===
schedule.every().tuesday.at("18:30").do(running_reminder)
schedule.every().wednesday.at("18:30").do(running_reminder)
schedule.every().thursday.at("18:30").do(strength_training)
schedule.every().friday.at("18:30").do(running_reminder)
schedule.every().saturday.at("18:30").do(lambda: bot.send_message(USER_ID, "üö∂‚Äç‚ôÇÔ∏è –°—É–±–æ—Ç–Ω—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –∑ —Å–∏–Ω–æ–º ‚Äî –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è!"))
schedule.every().sunday.at("18:30").do(running_reminder)
schedule.every().monday.at("18:30").do(strength_training)
schedule.every().monday.at("07:30").do(weight_checkin)
schedule.every().day.at("20:30").do(mood_checkin)
schedule.every().sunday.at("21:00").do(send_weekly_report)

# === –§–û–ù ===
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

def main():
    logging.info("ü§ñ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    threading.Thread(target=run_schedule, daemon=True).start()
    bot.polling(none_stop=True)

if __name__ == "__main__":
    main()
