
import os
import time
import threading
import logging
from datetime import datetime, date
from dotenv import load_dotenv
import telebot
import schedule
import pytz
import tracker

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fitness_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Constants
UKRAINE_TZ = pytz.timezone("Europe/Kyiv")

class FitnessBot:
    """Main fitness bot using tracker module."""
    
    def __init__(self):
        self._load_environment()
        self.bot = telebot.TeleBot(self.bot_token)
        self.tracker = tracker.TrainingTracker()
        self._setup_handlers()
        self._setup_schedule()
        
        # Configuration
        self.goal_date = date(2025, 9, 15)
        
        # Content arrays
        self.warmup_links = [
            "https://www.youtube.com/watch?v=Gf7nqxkY0yU",
            "https://www.youtube.com/watch?v=nph81YymVqg", 
            "https://www.youtube.com/watch?v=K-CrEi0ymMg",
        ]
        
        self.motivations = [
            "üí™ –ü–∞–º'—è—Ç–∞–π, —Ç–∏ —Ä–æ–±–∏—à —Ü–µ –¥–ª—è —Å–µ–±–µ —ñ —Å–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è!",
            "üèÉ‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ —Ü—ñ–ª—ñ ‚Äî 10 –∫–º!",
            "üî• –†—É—Ö ‚Äî –∂–∏—Ç—Ç—è. –¢–∏ –≤–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!",
            "‚úÖ –ö–æ–∂–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ–≥–ª–∏–Ω–∫–∞ —É —Ç–≤–æ—î–º—É –Ω–æ–≤–æ–º—É —Ç—ñ–ª—ñ!",
            "üéØ –ù–µ–¥—ñ–ª—è ‚Äî –¥–µ–Ω—å –±–µ–∑ –ø–µ—Ä–µ—Ä–≤! –°—å–æ–≥–æ–¥–Ω—ñ –±—ñ–∂–∏—à –¥–æ –∫—ñ–Ω—Ü—è!",
        ]
    
    def _load_environment(self):
        """Load environment variables."""
        load_dotenv()
        
        self.bot_token = os.getenv("BOT_TOKEN")
        user_id_str = os.getenv("USER_ID")
        
        if not self.bot_token:
            raise ValueError("BOT_TOKEN environment variable not set")
        if not user_id_str:
            raise ValueError("USER_ID environment variable not set")
        
        try:
            self.user_id = int(user_id_str)
        except ValueError as exc:
            raise ValueError("USER_ID must be a valid integer") from exc
    
    def _setup_handlers(self):
        """Setup bot message handlers."""
        
        @self.bot.message_handler(commands=['start', 'test'])
        def send_welcome(message):
            response = (
                "ü§ñ Fitness Bot –∞–∫—Ç–∏–≤–Ω–∏–π!\n\n"
                "üìÖ –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:\n"
                "üèÉ‚Äç‚ôÇÔ∏è –ë—ñ–≥: –í—ñ–≤—Ç–æ—Ä–æ–∫, –°–µ—Ä–µ–¥–∞, –ü'—è—Ç–Ω–∏—Ü—è, –ù–µ–¥—ñ–ª—è\n"
                "üí™ –°–∏–ª–æ–≤—ñ: –ü–æ–Ω–µ–¥—ñ–ª–æ–∫, –ß–µ—Ç–≤–µ—Ä\n"
                "‚öñÔ∏è –ó–≤–∞–∂—É–≤–∞–Ω–Ω—è: –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ\n"
                "üß† –ù–∞—Å—Ç—Ä—ñ–π: –©–æ–¥–Ω—è –≤–≤–µ—á–µ—Ä—ñ\n\n"
                "–ö–æ–º–∞–Ω–¥–∏: /status, /done"
            )
            self.bot.reply_to(message, response)
        
        @self.bot.message_handler(commands=['done'])
        def mark_done(message):
            self._handle_training_completion(message)
        
        @self.bot.message_handler(commands=['status'])
        def send_status(message):
            self._send_status()
    
    def _setup_schedule(self):
        """Setup training schedule."""
        # Running reminders
        schedule.every().tuesday.at("18:30").do(self._send_running_reminder)
        schedule.every().wednesday.at("18:30").do(self._send_running_reminder)
        schedule.every().friday.at("18:30").do(self._send_running_reminder)
        schedule.every().sunday.at("18:30").do(self._send_sunday_running_reminder)
        
        # Strength training
        schedule.every().monday.at("18:30").do(self._send_strength_reminder)
        schedule.every().thursday.at("18:30").do(self._send_strength_reminder)
        
        # Check-ins
        schedule.every().monday.at("07:30").do(self._send_weight_checkin)
        schedule.every().day.at("20:30").do(self._send_mood_checkin)
        schedule.every().sunday.at("21:00").do(self._send_weekly_report)
    
    def get_interval_plan(self) -> str:
        """Get running interval plan based on days left."""
        days_left = (self.goal_date - date.today()).days
        
        if days_left > 70:
            return "1 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 6 —Ä–∞—É–Ω–¥—ñ–≤ (~1.5 –∫–º)"
        elif days_left > 50:
            return "2 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 6 —Ä–∞—É–Ω–¥—ñ–≤ (~2.5 –∫–º)"
        elif days_left > 35:
            return "5 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 4 —Ä–∞—É–Ω–¥–∏ (~3.5 –∫–º)"
        elif days_left > 21:
            return "10 —Ö–≤ –±—ñ–≥ / 1 —Ö–≤ —Ö–æ–¥–∞ √ó 3 —Ä–∞—É–Ω–¥–∏ (~5.5 –∫–º)"
        elif days_left > 10:
            return "–ë—ñ–∂–∏ –±–µ–∑ –∑—É–ø–∏–Ω–∫–∏ —É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É —Ç–µ–º–ø—ñ (~7 –∫–º)"
        elif days_left > 1:
            return "–ü—Ä–æ–±—ñ–∂–∫–∞ –Ω–∞ ~8-9 –∫–º —É —Ç–µ–º–ø—ñ –∑–º–∞–≥–∞–Ω–Ω—è"
        elif days_left == 1:
            return "üéØ –ó–∞–≤—Ç—Ä–∞ –∑–º–∞–≥–∞–Ω–Ω—è! –õ–µ–≥–∫–∞ –ø—Ä–æ–±—ñ–∂–∫–∞ –∞–±–æ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫."
        else:
            return "üèÅ –°—å–æ–≥–æ–¥–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è! –î–æ–≤—ñ—Ä—è–π –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ! üí•"
    
    def _send_running_reminder(self):
        """Send regular running reminder."""
        try:
            now = datetime.now(UKRAINE_TZ)
            warmup = self.warmup_links[now.day % len(self.warmup_links)]
            motivation = self.motivations[now.day % len(self.motivations)]
            intervals = self.get_interval_plan()
            days_left = (self.goal_date - date.today()).days
            pushups_count = self.tracker.get_current_pushups_count()
            
            message = (
                f"üèÉ‚Äç‚ôÇÔ∏è –ß–∞—Å –Ω–∞ –ø—Ä–æ–±—ñ–∂–∫—É!\n\n"
                f"üî∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {days_left} –¥–Ω—ñ–≤ –¥–æ 10 –∫–º\n"
                f"üî∏ –†–æ–∑–º–∏–Ω–∫–∞: {warmup}\n"
                f"üî∏ –í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å {pushups_count} —Ä–∞–∑(—ñ–≤)\n"
                f"üî∏ –ë—ñ–≥ —Å—å–æ–≥–æ–¥–Ω—ñ: {intervals}\n"
                f"üî∏ –¢–µ–º–ø: 7:45‚Äì8:30 —Ö–≤/–∫–º\n\n"
                f"{motivation}\n\n"
                f"–ü—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: /done"
            )
            
            self.bot.send_message(self.user_id, message)
            logger.info("Running reminder sent")
            
        except Exception as e:
            logger.error(f"Error sending running reminder: {e}")
    
    def _send_sunday_running_reminder(self):
        """Send special Sunday running reminder - no breaks!"""
        try:
            now = datetime.now(UKRAINE_TZ)
            warmup = self.warmup_links[now.day % len(self.warmup_links)]
            intervals = self.get_interval_plan()
            days_left = (self.goal_date - date.today()).days
            pushups_count = self.tracker.get_current_pushups_count()
            
            message = (
                f"üèÉ‚Äç‚ôÇÔ∏èüî• –ù–ï–î–Ü–õ–Ø - –î–ï–ù–¨ –ë–ï–ó –ü–ï–†–ï–†–í! üî•\n\n"
                f"üéØ –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –±—ñ–∂–∏—à –¥–æ –∫—ñ–Ω—Ü—è –±–µ–∑ –∑—É–ø–∏–Ω–æ–∫!\n"
                f"üî∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {days_left} –¥–Ω—ñ–≤ –¥–æ 10 –∫–º\n"
                f"üî∏ –†–æ–∑–º–∏–Ω–∫–∞: {warmup}\n"
                f"üî∏ –í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å {pushups_count} —Ä–∞–∑(—ñ–≤)\n"
                f"üî∏ –ë—ñ–≥: {intervals}\n"
                f"üî∏ ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ë–ï–ó –ø–µ—Ä–µ—Ä–≤ –Ω–∞ —Ö–æ–¥—å–±—É!\n\n"
                f"üí™ –ù–µ–¥—ñ–ª—è ‚Äî —Ç–≤—ñ–π –¥–µ–Ω—å —Å–∏–ª–∏!\n"
                f"üèÜ –ü–æ–∫–∞–∂–∏ —Å–æ–±—ñ, –Ω–∞ —â–æ —Ç–∏ –∑–¥–∞—Ç–µ–Ω!\n\n"
                f"–ü—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: /done"
            )
            
            self.bot.send_message(self.user_id, message)
            logger.info("Sunday running reminder sent")
            
        except Exception as e:
            logger.error(f"Error sending Sunday reminder: {e}")
    
    def _send_strength_reminder(self):
        """Send strength training reminder using tracker."""
        try:
            # ‚úÖ Use tracker's method
            self.tracker.send_strength_reminder(self.bot, self.user_id)
            logger.info("Strength reminder sent")
        except Exception as e:
            logger.error(f"Error sending strength reminder: {e}")
    
    def _send_weight_checkin(self):
        """Send weight check-in reminder."""
        try:
            message = "‚öñÔ∏è –ß–∞—Å —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤–∞–∂—É–≤–∞–Ω–Ω—è! –í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É —É –∫–≥."
            self.bot.send_message(self.user_id, message)
        except Exception as e:
            logger.error(f"Error sending weight check-in: {e}")
    
    def _send_mood_checkin(self):
        """Send mood check-in."""
        try:
            message = "üß† –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ? (–≤—ñ–¥ 1 –¥–æ 10 –∞–±–æ –æ–ø–∏—Å)"
            self.bot.send_message(self.user_id, message)
        except Exception as e:
            logger.error(f"Error sending mood check-in: {e}")
    
    def _send_weekly_report(self):
        """Send weekly report using tracker."""
        try:
            # ‚úÖ Use tracker's methods
            missed = self.tracker.check_missed_days()
            
            if missed:
                message = (
                    f"üìã –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç\n\n"
                    f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω—ñ: {', '.join(sorted(missed))}\n"
                    f"üí° –ù–∞–¥–æ–ª—É–∂ –∞–±–æ —Ä–æ–∑–ø–ª–∞–Ω—É–π –∫—Ä–∞—â–µ!"
                )
            else:
                message = (
                    "üìã –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç\n\n"
                    "‚úÖ –£—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!\n"
                    "üèÜ –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!"
                )
            
            self.bot.send_message(self.user_id, message)
            
            # Generate PDF using tracker
            try:
                report_path = self.tracker.generate_weekly_report_pdf()
                with open(report_path, "rb") as pdf_file:
                    self.bot.send_document(self.user_id, pdf_file)
                os.remove(report_path)
            except Exception as e:
                logger.error(f"Error with PDF: {e}")
            
            # Reset using tracker
            self.tracker.reset_week_log()
            
        except Exception as e:
            logger.error(f"Error sending weekly report: {e}")
    
    def _handle_training_completion(self, message):
        """Handle training completion."""
        try:
            today = datetime.now(UKRAINE_TZ).strftime("%A")
            
            if today in self.tracker.scheduled_running_days:
                pushups = self.tracker.get_current_pushups_count()
                # ‚úÖ Use tracker's method
                self.tracker.log_training_day("running", pushups)
                
                if today == "Sunday":
                    response = (
                        "üèÜ –ù–µ–¥—ñ–ª—è –ë–ï–ó –ü–ï–†–ï–†–í –≤–∏–∫–æ–Ω–∞–Ω–∞!\n"
                        f"üí™ –í—ñ–¥—Ç–∏—Å–∫–∞–Ω–Ω—è: {pushups}\n"
                        "üî• –°–ø—Ä–∞–≤–∂–Ω—è —Å–∏–ª–∞ –≤–æ–ª—ñ!"
                    )
                else:
                    response = (
                        f"‚úÖ –ü—Ä–æ–±—ñ–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"üí™ –í—ñ–¥—Ç–∏—Å–∫–∞–Ω–Ω—è: {pushups}\n"
                        "üëè –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!"
                    )
                    
            elif today in self.tracker.scheduled_strength_days:
                self.tracker.log_training_day("strength")
                response = "‚úÖ –°–∏–ª–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üí™"
            else:
                response = "ü§î –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å."
            
            self.bot.reply_to(message, response)
            
        except Exception as e:
            logger.error(f"Error handling completion: {e}")
    
    def _send_status(self):
        """Send current status."""
        try:
            today = datetime.now(UKRAINE_TZ)
            day_name = today.strftime("%A")
            days_to_goal = (self.goal_date - date.today()).days
            
            message = (
                f"üìä –°—Ç–∞—Ç—É—Å\n\n"
                f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {day_name}\n"
                f"üéØ –î–Ω—ñ–≤ –¥–æ –º–µ—Ç–∏: {days_to_goal}\n"
                f"üí™ –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è: {self.tracker.get_current_pushups_count()}\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –î–Ω—ñ–≤ –±—ñ–≥—É: {self.tracker.get_running_days_count()}\n"
            )
            
            if day_name == "Sunday":
                message += "\nüî• –°—å–æ–≥–æ–¥–Ω—ñ –ù–ï–î–Ü–õ–Ø - –±—ñ–≥ –ë–ï–ó –ü–ï–†–ï–†–í!"
            elif day_name in self.tracker.scheduled_running_days:
                message += "\nüèÉ‚Äç‚ôÇÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –±—ñ–≥—É"
            elif day_name in self.tracker.scheduled_strength_days:
                message += "\nüí™ –°—å–æ–≥–æ–¥–Ω—ñ —Å–∏–ª–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
            
            self.bot.send_message(self.user_id, message)
            
        except Exception as e:
            logger.error(f"Error sending status: {e}")
    
    def run_scheduler(self):
        """Run scheduler in background thread."""
        def scheduler_loop():
            while True:
                try:
                    schedule.run_pending()
                    time.sleep(60)
                except Exception as e:
                    logger.error(f"Scheduler error: {e}")
                    time.sleep(60)
        
        threading.Thread(target=scheduler_loop, daemon=True).start()
        logger.info("Scheduler started")
    
    def run(self):
        """Run the bot."""
        self.run_scheduler()
        logger.info("Bot started")
        
        while True:
            try:
                self.bot.polling(none_stop=True, timeout=60)
            except Exception as e:
                logger.error(f"Polling error: {e}")
                time.sleep(10)

def main():
    """Main entry point."""
    try:
        bot = FitnessBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise

if __name__ == "__main__":
    main()